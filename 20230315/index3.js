// 로또 추첨기 만들기

// 로또 번호들이 들어갈 배열
let lottoNum = [];

let res = [];

// 1. 겹치는 숫자가 없어야 한다.
// 2. 숫자가 6개
// 3. 나온 숫자들의 결과를 보여준다.

// 체크하면서 만들어야 버그가 어디서 나오는지 바로바로 해결하기 쉽다.

// 추첨 전에 세팅 작업
function lottoInit(){
    // 로또의 번호를 모두 뽑아놓고 가져다 사용하는 방식
    // 1 ~ 45번까지 반복시킬 반복문
    
    // 배열에 값을 추가하는 작업은 초기화가 필요한지 항상 확인하고 진행한다.

    // 배열 초기화
    lottoNum = [];
    for(let i = 1; i <= 45; i++){
        // 1 ~ 45까지의 숫자를 배열에 담는다.
        lottoNum.push(i);
    }

    console.log("init 함수 실행, lotto 세팅 끝 " + lottoNum);
}

// 로또 추첨 실행 함수
function lottoPlay(){
    // 배열 초기화
    res = [];
    // 추첨하는 곳
    for(let i = 0; i < 6; i++){
        // Math.floor() 값이 소숫점 아래의 값을 갖고 있으면 버림 정수로 변환해 준다.
        // 0 ~ 44 랜덤 숫자를 뽑고 인덱스로 사용
        let rndIndex = Math.floor(Math.random() * lottoNum.length);

        // 랜덤으로 뽑은 인덱스를 가지고 lottoNum 배열에 인덱스로 전달해서
        // number라는 변수에 담아준다.
        let number = lottoNum[rndIndex];

        // 랜덤한 값이 또 나오지 않게 하기 위해서 
        // 배열에서 값을 제거하려면 배열 메소드 splice 사용
        // 시작점(인덱스), 해당 시작점으로부터 몇 개를 제거할 것인지 설정
        lottoNum.splice(rndIndex, 1);
        // 인덱스에 해당하는 값 하나만 제거
        // 해당 배열에서 값이 제거되면 길이가 줄어들기 때문에 랜덤값을 구하는 과정에서도
        // lottoNum.length값이 줄어들기 때문에 정상 작동한다.

        // 뽑은 값 담아두기
        res.push(number);
    }
}

function main(){
    // 로또 세팅하고
    lottoInit();

    // 로또 추첨하자
    lottoPlay();

    console.log("로또의 결과는? " + res);
}

// 함수 초기화나 play같은 위의 코드처럼 단위별로 기능을 정리해두었을 때 단위 테스트가 가능하다.
// 단위별로 버그가 없는지 테스트 해볼 수 있다.

// 단위별 기능 오류가 없을 경우 통합 테스트 진행, 전체적으로 오류가 없는지 테스트 진행.

// 전체 기능이 들어있는 함수를 만들고 함수가 실행될 때마다 해당 기능이 동작할 수 있게
// 재사용성을 높일 수 있다.

main();
main();
main();

// 이렇게 단위 통합으로 작업을 정리해두는 습관을 길러야 한다.